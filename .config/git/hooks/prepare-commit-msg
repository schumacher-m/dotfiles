#!/usr/bin/env python3

"""
Git hook to generate commit messages using local LLM.
This prepare-commit-msg hook generates a conventional commit message based on staged changes.
"""

import os
import sys
import subprocess
import httpx
from typing import Dict, List

def main():
    # Get command line arguments
    if len(sys.argv) < 2:
        print("Error: Missing commit message file argument")
        sys.exit(1)

    commit_msg_file = sys.argv[1]
    commit_source = sys.argv[2] if len(sys.argv) > 2 else None

    # Only generate message for regular commits (not merge, squash, etc.)
    if commit_source:
        sys.exit(0)

    # Get the staged diff
    try:
        result = subprocess.run(
            ['git', 'diff', '--staged'],
            capture_output=True,
            text=True,
            check=True
        )
        diff = result.stdout
    except subprocess.CalledProcessError as e:
        print(f"Error: Failed to get staged diff: {e}")
        sys.exit(1)

    if not diff.strip():
        sys.exit(0)

    # Generate commit message
    prompt = f"""Generate ONLY a conventional commit message for these changes. Follow the format: type(scope): description. Keep it concise and under 50 characters for the first line. If needed, add a blank line and more detailed explanation. Do not include any explanation or commentary - return only the commit message itself.

Changes:
```
{diff}
```"""

    try:
        payload = {
            "model": "openai/gpt-oss-20b",
            "messages": [
                {
                    "role": "system",
                    "content": (
                        "You are a commit message generator. "
                        "Return only a conventional commit message. No commentary."
                    ),
                },
                {"role": "user", "content": prompt},
            ],
            "temperature": 0.7,
            "max_tokens": -1,
            "stream": False,
        }

        response = httpx.post(
            "http://localhost:1234/v1/chat/completions",
            json=payload,
            timeout=60,
        )
        data = response.json()
        commit_message = data["choices"][0]["message"]["content"].strip()
    except Exception as e:
        print(f"Error: Failed to generate commit message: {e}")
        print(
            "Please run 'git commit' again or write a message manually."
        )
        sys.exit(1)

    # Validate the commit message
    if not commit_message or "Error:" in commit_message:
        print("Error: Invalid commit message generated")
        print(
            "Please run 'git commit' again or write a message manually."
        )
        sys.exit(1)

    # Write the generated message to the commit message file
    try:
        with open(commit_msg_file, "w") as f:
            f.write(commit_message)
    except Exception as e:
        print(f"Error: Failed to write commit message: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
